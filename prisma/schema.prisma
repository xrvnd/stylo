// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  nickname  String?
  email     String?  @unique
  phone     String
  address   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  orderId       Int?
  customerId    Int
  customer      Customer    @relation(fields: [customerId], references: [id])
  employeeId    Int?
  employee      Employee?   @relation(fields: [employeeId], references: [id])
  orderDate     DateTime    @default(now())
  dueDate       DateTime?
  status        String      @default("PENDING")
  paymentMethod String?
  totalAmount   Int
  advanceAmount Int         @default(0)
  notes         String?
  orderItems    OrderItem[]
  orderImages   OrderImage[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime @updatedAt
}


model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  description String
  workType    String   @default("SIMPLE_WORK") //stores typeof work
  quantity    Int
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  role      String   @default("EMPLOYEE")
  orders    Order[]
  payments  EmployeePayment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderImage {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  image     Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeePayment {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  type        String
  amount      Int
  notes       String?
  paymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}